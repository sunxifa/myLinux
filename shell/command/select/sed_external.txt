SED(1)				 User Commands				SED(1)



NAME
       sed - stream editor for filtering and transforming text

SYNOPSIS
       sed [OPTION]... {script-only-if-no-other-script} [input-file]...

DESCRIPTION
       Sed  is a stream editor.	 A stream editor is used to perform basic text
       transformations on an input stream (a file or input from	 a  pipeline).
       While  in  some	ways similar to an editor which permits scripted edits
       (such as ed), sed works by making only one pass over the input(s),  and
       is consequently more efficient.	But it is sed’s ability to filter text
       in a pipeline which particularly distinguishes it from other  types  of
       editors.

       -n, --quiet, --silent

	      suppress automatic printing of pattern space

       -e script, --expression=script

	      add the script to the commands to be executed

       -f script-file, --file=script-file

	      add the contents of script-file to the commands to be executed

       --follow-symlinks

	      follow symlinks when processing in place

       -i[SUFFIX], --in-place[=SUFFIX]

	      edit files in place (makes backup if extension supplied)

       -c, --copy

	      use copy instead of rename when shuffling files in -i mode

       -l N, --line-length=N

	      specify the desired line-wrap length for the ‘l’ command

       --posix

	      disable all GNU extensions.

       -r, --regexp-extended

	      use extended regular expressions in the script.

       -s, --separate

	      consider	files  as  separate rather than as a single continuous
	      long stream.

       -u, --unbuffered

	      load minimal amounts of data from the input files and flush  the
	      output buffers more often

       --help display this help and exit

       --version
	      output version information and exit

       If  no  -e, --expression, -f, or --file option is given, then the first
       non-option argument is taken as	the  sed  script  to  interpret.   All
       remaining  arguments  are  names	 of input files; if no input files are
       specified, then the standard input is read.

       GNU sed home page:  <http://www.gnu.org/software/sed/>.	 General  help
       using  GNU software: <http://www.gnu.org/gethelp/>.  E-mail bug reports
       to: <bug-gnu-utils@gnu.org>.  Be sure to include the word ‘‘sed’’ some-
       where in the ‘‘Subject:’’ field.

COMMAND SYNOPSIS
       This is just a brief synopsis of sed commands to serve as a reminder to
       those who already know sed; other documentation (such  as  the  texinfo
       document) must be consulted for fuller descriptions.

   Zero-address ‘‘commands’’
       : label
	      Label for b and t commands.

       #comment
	      The  comment  extends until the next newline (or the end of a -e
	      script fragment).

       }      The closing bracket of a { } block.

   Zero- or One- address commands
       =      Print the current line number.

       a \

       text   Append text, which has each embedded newline preceded by a back-
	      slash.

       i \

       text   Insert text, which has each embedded newline preceded by a back-
	      slash.

       q [exit-code]
	      Immediately quit the sed	script	without	 processing  any  more
	      input,  except  that  if	auto-print is not disabled the current
	      pattern space will be printed.  The exit code argument is a  GNU
	      extension.

       Q [exit-code]
	      Immediately  quit	 the  sed  script  without processing any more
	      input.  This is a GNU extension.

       r filename
	      Append text read from filename.

       R filename
	      Append a line read from filename.	 Each invocation of  the  com-
	      mand reads a line from the file.	This is a GNU extension.

   Commands which accept address ranges
       {      Begin a block of commands (end with a }).

       b label
	      Branch to label; if label is omitted, branch to end of script.

       t label
	      If  a  s///  has	done  a successful substitution since the last
	      input line was read and since the last  t	 or  T	command,  then
	      branch to label; if label is omitted, branch to end of script.

       T label
	      If  no  s///  has	 done a successful substitution since the last
	      input line was read and since the last  t	 or  T	command,  then
	      branch  to  label; if label is omitted, branch to end of script.
	      This is a GNU extension.

       c \

       text   Replace the selected lines with text, which  has	each  embedded
	      newline preceded by a backslash.

       d      Delete pattern space.  Start next cycle.

       D      Delete  up  to  the first embedded newline in the pattern space.
	      Start next cycle, but skip reading from the input	 if  there  is
	      still data in the pattern space.

       h H    Copy/append pattern space to hold space.

       g G    Copy/append hold space to pattern space.

       x      Exchange the contents of the hold and pattern spaces.

       l      List out the current line in a ‘‘visually unambiguous’’ form.

       l width
	      List  out	 the  current line in a ‘‘visually unambiguous’’ form,
	      breaking it at width characters.	This is a GNU extension.

       n N    Read/append the next line of input into the pattern space.

       p      Print the current pattern space.

       P      Print up to the first embedded newline of	 the  current  pattern
	      space.

       s/regexp/replacement/
	      Attempt  to match regexp against the pattern space.  If success-
	      ful,  replace  that  portion  matched  with  replacement.	   The
	      replacement may contain the special character & to refer to that
	      portion of the pattern space  which  matched,  and  the  special
	      escapes  \1  through  \9	to refer to the corresponding matching
	      sub-expressions in the regexp.

       w filename
	      Write the current pattern space to filename.

       W filename
	      Write the first line of the current pattern space	 to  filename.
	      This is a GNU extension.

       y/source/dest/
	      Transliterate  the  characters in the pattern space which appear
	      in source to the corresponding character in dest.

Addresses
       Sed commands can be given with no addresses, in which case the  command
       will  be	 executed for all input lines; with one address, in which case
       the command will only be executed for  input  lines  which  match  that
       address;	 or with two addresses, in which case the command will be exe-
       cuted for all input lines which match  the  inclusive  range  of	 lines
       starting	 from  the first address and continuing to the second address.
       Three things to note about address ranges: the  syntax  is  addr1,addr2
       (i.e.,  the  addresses  are separated by a comma); the line which addr1
       matched will always be accepted, even if addr2 selects an earlier line;
       and  if	addr2 is a regexp, it will not be tested against the line that
       addr1 matched.

       After the address (or address-range), and before the command, a !   may
       be inserted, which specifies that the command shall only be executed if
       the address (or address-range) does not match.

       The following address types are supported:

       number Match only the specified line number.

       first~step
	      Match every step’th line starting with line first.  For example,
	      ‘‘sed  -n	 1~2p’’	 will  print all the odd-numbered lines in the
	      input stream, and the address 2~5 will match every  fifth	 line,
	      starting	with the second.  first can be zero; in this case, sed
	      operates as if it were equal to step.  (This is an extension.)

       $      Match the last line.

       /regexp/
	      Match lines matching the regular expression regexp.

       \cregexpc
	      Match lines matching the regular expression regexp.  The	c  may
	      be any character.

       GNU sed also supports some special 2-address forms:

       0,addr2
	      Start  out  in  "matched	first  address"	 state, until addr2 is
	      found.  This is similar to 1,addr2, except that if addr2 matches
	      the very first line of input the 0,addr2 form will be at the end
	      of its range, whereas the 1,addr2 form  will  still  be  at  the
	      beginning of its range.  This works only when addr2 is a regular
	      expression.

       addr1,+N
	      Will match addr1 and the N lines following addr1.

       addr1,~N
	      Will match addr1 and the lines following addr1  until  the  next
	      line whose input line number is a multiple of N.

REGULAR EXPRESSIONS
       POSIX.2 BREs should be supported, but they aren’t completely because of
       performance problems.  The \n sequence in a regular expression  matches
       the newline character, and similarly for \a, \t, and other sequences.

BUGS
       E-mail  bug  reports  to	 bonzini@gnu.org.  Be sure to include the word
       ‘‘sed’’ somewhere in the ‘‘Subject:’’ field.  Also, please include  the
       output of ‘‘sed --version’’ in the body of your report if at all possi-
       ble.

COPYRIGHT
       Copyright © 2009 Free Software Foundation, Inc.
       This is free software; see the source for copying conditions.  There is
       NO  warranty;  not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR
       PURPOSE, to the extent permitted by law.

       GNU sed home page:  <http://www.gnu.org/software/sed/>.	 General  help
       using  GNU software: <http://www.gnu.org/gethelp/>.  E-mail bug reports
       to: <bug-gnu-utils@gnu.org>.  Be sure to include the word ‘‘sed’’ some-
       where in the ‘‘Subject:’’ field.

SEE ALSO
       awk(1),	ed(1),	grep(1),  tr(1),  perlre(1),  sed.info, any of various
       books on sed, the sed FAQ
       (http://sed.sf.net/grabbag/tutorials/sedfaq.txt),
       http://sed.sf.net/grabbag/.

       The full documentation for sed is maintained as a Texinfo manual.  If
       the info and sed programs are properly installed at your site, the com-
       mand

	      info sed

       should give you access to the complete manual.



sed version 4.2.1		   June 2009				SED(1)




sed是一个很好的文件处理工具，本身是一个管道命令，主要是以行为单位进行处理，可以将数据行进行替换、删除、新增、选取等特定工作，下面先了解一下sed的用法
sed命令行格式为：
         sed [-nefri] [動作]       

常用选项：
        -n∶使用安静(silent)模式。在一般 sed 的用法中，所有来自 STDIN的资料一般都会被列出到萤幕上。但如果加上 -n 参数后，则只有经过sed 特殊处理的那一行(或者动作)才会被列出来。
        -e∶直接在指令列模式上进行 sed 的动作编辑；
        -f∶直接将 sed 的动作写在一个档案内， -f filename 则可以执行 filename 内的sed 动作；
        -r∶sed 的动作支援的是延伸型正规表示法的语法。(预设是基础正规表示法语法)
        -i∶直接修改读取的档案内容，而不是由萤幕输出。       
動作說明：  [n1[,n2]]function
n1, n2 ：不見得會存在，一般代表『選擇進行動作的行數』，舉例來說，如果我的動作
         是需要在 10 到 20 行之間進行的，則『 10,20[動作行為] 』
function 有底下這些咚咚：
        a   ∶新增， a 的后面可以接字串，而这些字串会在新的一行出现(目前的下一行)～
        c   ∶取代， c 的后面可以接字串，这些字串可以取代 n1,n2 之间的行！
        d   ∶删除，因为是删除啊，所以 d 后面通常不接任何咚咚；
        i   ∶插入， i 的后面可以接字串，而这些字串会在新的一行出现(目前的上一行)；
        p   ∶列印，亦即将某个选择的资料印出。通常 p 会与参数 sed -n 一起运作～
        s   ∶取代，可以直接进行取代的工作哩！通常这个 s 的动作可以搭配正规表示法！例如 1,20s/old/new/g 就是啦！

举例：（假设我们有一文件名为ab）
删除某行
     [root@localhost ruby] # sed '1d' ab              #删除第一行 
     [root@localhost ruby] # sed '$d' ab              #删除最后一行
     [root@localhost ruby] # sed '1,2d' ab           #删除第一行到第二行
     [root@localhost ruby] # sed '2,$d' ab           #删除第二行到最后一行
	 
显示某行
.    [root@localhost ruby] # sed -n '1p' ab           #显示第一行 
     [root@localhost ruby] # sed -n '$p' ab           #显示最后一行
     [root@localhost ruby] # sed -n '1,2p' ab        #显示第一行到第二行
     [root@localhost ruby] # sed -n '2,$p' ab        #显示第二行到最后一行
	 
使用模式进行查询
     [root@localhost ruby] # sed -n '/ruby/p' ab    #查询包括关键字ruby所在所有行
     [root@localhost ruby] # sed -n '/\$/p' ab        #查询包括关键字$所在所有行，使用反斜线\屏蔽特殊含义
		
增加一行或多行字符串
     [root@localhost ruby]# cat ab
     Hello!
     ruby is me,welcome to my blog.
     end
     [root@localhost ruby] # sed '1a drink tea' ab  #第一行后增加字符串"drink tea"
     Hello!
     drink tea
     ruby is me,welcome to my blog. 
     end
     [root@localhost ruby] # sed '1,3a drink tea' ab #第一行到第三行后增加字符串"drink tea"
     Hello!
     drink tea
     ruby is me,welcome to my blog.
     drink tea
     end
     drink tea
     [root@localhost ruby] # sed '1a drink tea\nor coffee' ab   #第一行后增加多行，使用换行符\n
     Hello!
     drink tea
     or coffee
     ruby is me,welcome to my blog.
     end
	 
	 sed '/first/a \add one' test.txt                #包含”first”字符串的行的后面加上字符串”add one”
	 sed '/^ha.*day$/a \add one' test.txt            #，^ha.*day$表示以ha开头，以day结尾的行
	 
代替一行或多行
     [root@localhost ruby] # sed '1c Hi' ab                #第一行代替为Hi
     Hi
     ruby is me,welcome to my blog.
     end
     [root@localhost ruby] # sed '1,2c Hi' ab             #第一行到第二行代替为Hi
     Hi
     end
	 
	 
替换一行中的某部分
　　格式：sed 's/要替换的字符串/新的字符串/g'   （要替换的字符串可以用正则表达式）
	特定行替换1，2s/old/new/g
     [root@localhost ruby] # sed -n '/ruby/p' ab | sed 's/ruby/bird/g'    #替换ruby为bird
　  [root@localhost ruby] # sed -n '/ruby/p' ab | sed 's/ruby//g'        #删除ruby

直接编辑文件
   插入
     [root@localhost ruby] # sed -i '$a bye' ab         #在文件ab中最后一行直接输入"bye"
     [root@localhost ruby]# cat ab
     Hello!
     ruby is me,welcome to my blog.
     end
     bye

删除匹配行
      sed -i '/匹配字符串/d'  filename  （注：若匹配字符串是变量，则需要“”，而不是‘’。记得好像是）

      替换匹配行中的某个字符串

      sed -i '/匹配字符串/s/替换源字符串/替换目标字符串/g' filename

	 
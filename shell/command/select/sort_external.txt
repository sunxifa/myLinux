SORT(1)				 User Commands			       SORT(1)



NAME
       sort - sort lines of text files

SYNOPSIS
       sort [OPTION]... [FILE]...
       sort [OPTION]... --files0-from=F

DESCRIPTION
       Write sorted concatenation of all FILE(s) to standard output.

       Mandatory  arguments  to	 long  options are mandatory for short options
       too.  Ordering options:

       -b, --ignore-leading-blanks
	      ignore leading blanks

       -d, --dictionary-order
	      consider only blanks and alphanumeric characters

       -f, --ignore-case
	      fold lower case to upper case characters

       -g, --general-numeric-sort
	      compare according to general numerical value

       -i, --ignore-nonprinting
	      consider only printable characters

       -M, --month-sort
	      compare (unknown) < ‘JAN’ < ... < ‘DEC’

       -h, --human-numeric-sort
	      compare human readable numbers (e.g., 2K 1G)

       -n, --numeric-sort
	      compare according to string numerical value

       -R, --random-sort
	      sort by random hash of keys

       --random-source=FILE
	      get random bytes from FILE

       -r, --reverse
	      reverse the result of comparisons

       --sort=WORD
	      sort according to WORD: general-numeric  -g,  human-numeric  -h,
	      month -M, numeric -n, random -R, version -V

       -V, --version-sort
	      natural sort of (version) numbers within text

       Other options:

       --batch-size=NMERGE
	      merge at most NMERGE inputs at once; for more use temp files

       -c, --check, --check=diagnose-first
	      check for sorted input; do not sort

       -C, --check=quiet, --check=silent
	      like -c, but do not report first bad line

       --compress-program=PROG
	      compress temporaries with PROG; decompress them with PROG -d

       --files0-from=F
	      read  input  from the files specified by NUL-terminated names in
	      file F; If F is - then read names from standard input

       -k, --key=POS1[,POS2]
	      start a key at POS1 (origin 1), end it at POS2 (default  end  of
	      line)

       -m, --merge
	      merge already sorted files; do not sort

       -o, --output=FILE
	      write result to FILE instead of standard output

       -s, --stable
	      stabilize sort by disabling last-resort comparison

       -S, --buffer-size=SIZE
	      use SIZE for main memory buffer

       -t, --field-separator=SEP
	      use SEP instead of non-blank to blank transition

       -T, --temporary-directory=DIR
	      use  DIR	for temporaries, not $TMPDIR or /tmp; multiple options
	      specify multiple directories

       -u, --unique
	      with -c, check for strict ordering; without -c, output only  the
	      first of an equal run

       -z, --zero-terminated
	      end lines with 0 byte, not newline

       --help display this help and exit

       --version
	      output version information and exit

       POS  is	F[.C][OPTS],  where  F is the field number and C the character
       position in the field; both are origin 1.  If neither -t nor -b	is  in
       effect,	characters  in	a  field are counted from the beginning of the
       preceding whitespace.  OPTS  is	one  or	 more  single-letter  ordering
       options,	 which	override  global ordering options for that key.	 If no
       key is given, use the entire line as the key.

       SIZE may be followed by the following multiplicative suffixes: % 1%  of
       memory, b 1, K 1024 (default), and so on for M, G, T, P, E, Z, Y.

       With no FILE, or when FILE is -, read standard input.

       ***  WARNING  ***  The locale specified by the environment affects sort
       order.  Set LC_ALL=C to get the traditional sort order that uses native
       byte values.

AUTHOR
       Written by Mike Haertel and Paul Eggert.

REPORTING BUGS
       Report sort bugs to bug-coreutils@gnu.org
       GNU coreutils home page: <http://www.gnu.org/software/coreutils/>
       General help using GNU software: <http://www.gnu.org/gethelp/>
       Report sort translation bugs to <http://translationproject.org/team/>

COPYRIGHT
       Copyright  ©  2010  Free Software Foundation, Inc.  License GPLv3+: GNU
       GPL version 3 or later <http://gnu.org/licenses/gpl.html>.
       This is free software: you are free  to	change	and  redistribute  it.
       There is NO WARRANTY, to the extent permitted by law.

SEE ALSO
       The  full documentation for sort is maintained as a Texinfo manual.  If
       the info and sort programs are properly installed  at  your  site,  the
       command

	      info coreutils 'sort invocation'

       should give you access to the complete manual.



GNU coreutils 8.4		   May 2011			       SORT(1)




sort命令是帮我们依据不同的数据类型进行排序，其语法及常用参数格式：
　　sort [-bcfMnrtk][源文件][-o 输出文件] 
补充说明：sort可针对文本文件的内容，以行为单位来排序。

参　　数：
  -b   忽略每行前面开始出的空格字符。
  -c   检查文件是否已经按照顺序排序。
  -f   排序时，忽略大小写字母。
  -M   将前面3个字母依照月份的缩写进行排序。
  -n   依照数值的大小排序。
  -o   <输出文件>   将排序后的结果存入指定的文件。
  -r   以相反的顺序来排序。
  -t   <分隔字符>   指定排序时所用的栏位分隔字符。
  -k   选择以哪个区间进行排序。
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

下面通过几个例子来讲述Sort的使用。

（1）sort将文件的每一行作为一个单位，相互比较，比较原则是从首字符向后，依次按ASCII码值进行比较，最后将他们按升序输出。

[rocrocket@rocrocket programming]$ cat seq.txt
banana
apple
pear
orange
[rocrocket@rocrocket programming]$ sort seq.txt
apple
banana
orange
pear

用户可以保存排序后的文件内容，或把排序后的文件内容输出至打印机。下例中用户把排序后的文件内容保存到名为result的文件中。
$ Sort seq.txt > result

（2）sort的-u选项

它的作用很简单，就是在输出行中去除重复行。

[rocrocket@rocrocket programming]$ cat seq.txt
banana
apple
pear
orange
pear
[rocrocket@rocrocket programming]$ sort seq.txt
apple
banana
orange
pear
pear
[rocrocket@rocrocket programming]$ sort -u seq.txt
apple
banana
orange
pear

pear由于重复被-u选项无情的删除了。

（3）sort的-r选项

sort默认的排序方式是升序，如果想改成降序，就加个-r就搞定了。

[rocrocket@rocrocket programming]$ cat number.txt
1
3
5
2
4
[rocrocket@rocrocket programming]$ sort number.txt
1
2
3
4
5
[rocrocket@rocrocket programming]$ sort -r number.txt
5
4
3
2
1
（5）sort的-o选项

由于sort默认是把结果输出到标准输出，所以需要用重定向才能将结果写入文件，形如sort filename > newfile。

但是，如果你想把排序结果输出到原文件中，用重定向可就不行了。

[rocrocket@rocrocket programming]$ sort -r number.txt > number.txt
[rocrocket@rocrocket programming]$ cat number.txt
[rocrocket@rocrocket programming]$
看，竟然将number清空了。

就在这个时候，-o选项出现了，它成功的解决了这个问题，让你放心的将结果写入原文件。这或许也是-o比重定向的唯一优势所在。

[rocrocket@rocrocket programming]$ cat number.txt
1
3
5
2
4
[rocrocket@rocrocket programming]$ sort -r number.txt -o number.txt
[rocrocket@rocrocket programming]$ cat number.txt
5
4
3
2
1

（6） sort的-n选项

你有没有遇到过10比2小的情况。我反正遇到过。出现这种情况是由于排序程序将这些数字按字符来排序了，排序程序会先比较1和2，显然1小，所以就将10放在2前面喽。这也是sort的一贯作风。

我们如果想改变这种现状，就要使用-n选项，来告诉sort，“要以数值来排序”！

[rocrocket@rocrocket programming]$ cat number.txt
1
10
19
11
2
5
[rocrocket@rocrocket programming]$ sort number.txt
1
10
11
19
2
5
[rocrocket@rocrocket programming]$ sort -n number.txt
1
2
5
10
11
19

（7） sort的-t选项和-k选项

如果有一个文件的内容是这样：

[rocrocket@rocrocket programming]$ cat facebook.txt
banana:30:5.5
apple:10:2.5
pear:90:2.3
orange:20:3.4

这个文件有三列，列与列之间用冒号隔开了，第一列表示水果类型，第二列表示水果数量，第三列表示水果价格。那么我想以水果数量来排序，也就是以第二列来排序，如何利用sort实现？幸好，sort提供了-t选项，后面可以设定间隔符。指定了间隔符之后，就可以用-k来指定列数了。

[rocrocket@rocrocket programming]$ sort -n -k 2 -t ‘:’ facebook.txt
apple:10:2.5
orange:20:3.4
banana:30:5.5
pear:90:2.3

（8） 其他的sort常用选项

-f会将小写字母都转换为大写字母来进行比较，亦即忽略大小写

-c会检查文件是否已排好序，如果乱序，则输出第一个乱序的行的相关信息，最后返回1

-C会检查文件是否已排好序，如果乱序，不输出内容，仅返回1

-M会以月份来排序，比如JAN小于FEB等等

-b会忽略每一行前面的所有空白部分，从第一个可见字符开始比较。
